@page "/fetchdata"
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<PageTitle>Registros de los logs</PageTitle>

<h1>Registros logs</h1>

<p>Historial de logs</p>
<div class="mb-3 row">
    <div class="col-4 mb-3">
    <label for="tipoBusqueda">Buscar por:</label>
    <select @onchange="HandleTipoBusquedaChange">
        <option value="Tipo">Tipo</option>
        <option value="Fecha">Fecha</option>
        <option value="RangoFecha">Rango de Fechas</option>
    </select>
    </div>
    <div class="col-8 mb-3">
    @if (tipoBusqueda == "Tipo")
    {
            <input type="text" @bind="busqueda" @oninput="HandleInputChange" />
    }
    @if (tipoBusqueda == "Fecha")
    {
            <input type="date" @bind="fechaBusqueda" @oninput="HandleFechaBusquedaChange" />
    }

    @if (tipoBusqueda == "RangoFecha")
    {
            <input type="date" @bind="fechaInicio" @oninput="HandleFechaInicioChange" />
            <input type="date" @bind="fechaFin" @oninput="HandleFechaFinChange" />
    }
    ||
    <button class="btn btn-primary me-2" @onclick="BuscarRegistros">Buscar</button>
    </div>
</div>

@if (registros == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tipo</th>
                <th>Descripción</th>
                <th>Fecha de Registro</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var registro in registros)
            {
                <tr>
                    <td>@registro.IdRegistro</td>
                    <td>@registro.Tipo</td>
                    <td>@registro.Descripccion</td>
                    <td>@(registro.FechaRegistro != null ? registro.FechaRegistro.Value.ToShortDateString() : "")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Registro[]? registros;
    private string tipoBusqueda = "Tipo";
    private string busqueda = "";
    private DateTime fechaBusqueda = DateTime.Now;
    private DateTime fechaInicio = DateTime.Now;
    private DateTime fechaFin = DateTime.Now;


    private void HandleInputChange(ChangeEventArgs e)
    {       
        busqueda = e.Value.ToString();       
    }
    private void HandleFechaBusquedaChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime result))
        {
            fechaBusqueda = result;
        }
    }

    private void HandleFechaInicioChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime result))
        {
            fechaInicio = result;
        }
    }

    private void HandleFechaFinChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime result))
        {
            fechaFin = result;
        }
    }
    private void HandleTipoBusquedaChange(ChangeEventArgs e)
    {
        tipoBusqueda = e.Value.ToString();
        
        
    }
    protected override async Task OnInitializedAsync()
    {
        await CargarRegistros();
    }

    private async Task CargarRegistros()
    {
        registros = await Http.GetFromJsonAsync<Registro[]>("https://localhost:7208/api/Registro");
    }

    private async Task BuscarRegistros()
    {
        if (tipoBusqueda == "Tipo" && string.IsNullOrEmpty(busqueda))
        {
            tipoBusqueda = "";
        }
        if (!string.IsNullOrEmpty(tipoBusqueda))
        {
            if (tipoBusqueda == "Fecha")
            {
                registros = await Http.GetFromJsonAsync<Registro[]>($"https://localhost:7208/api/Registro/ByFecha?fecha={fechaBusqueda.ToString("yyyy-MM-dd")}");
            }
            else if (tipoBusqueda == "RangoFecha")
            {             
                registros = await Http.GetFromJsonAsync<Registro[]>($"https://localhost:7208/api/Registro/ByRangoFechas?fechaInicio={fechaInicio.ToString("yyyy-MM-dd")}&fechaFin={fechaFin.ToString("yyyy-MM-dd")}");
            }
            else
            {
                registros = await Http.GetFromJsonAsync<Registro[]>($"https://localhost:7208/api/Registro/ByNombre?txt={busqueda}");
            }
        }
        else
        {
            // Si el campo de búsqueda está vacío, cargar todos los registros
            await CargarRegistros();
            tipoBusqueda = "Tipo";
        }
    }

    public class Registro
    {
        public int IdRegistro { get; set; }
        public string? Tipo { get; set; }
        public string? Descripccion { get; set; }
        public DateTime? FechaRegistro { get; set; }
    }
}
